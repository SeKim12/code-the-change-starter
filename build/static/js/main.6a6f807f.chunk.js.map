{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","value","onClick","className","Board","squares","style","Math","sqrt","length","map","_","i","Game","useState","Array","fill","board","setBoard","stepNumber","setStepNumber","xIsNext","setXisNext","winner","setWinner","nextPlayer","handleClick","alert","newBoard","lastMove","curBoard","colStart","rowStart","count","abs","diag","WIDTH","calculateWinner","ReactDom","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a6f807f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Square = ({value, onClick}) => {\n  return (\n    <button className={`squares ${value}`} onClick={onClick}>{value}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\n\nconst Board = ({squares, onClick}) => (\n  <div className=\"board\" style={{\n    \"grid-template\": `repeat(${Math.sqrt(squares.length)}, 1fr) / repeat(${Math.sqrt(squares.length)}, 1fr)`\n  }}>\n    {squares.map((_, i) => <Square value={_} onClick={() => onClick(i)}/>)}\n  </div>\n);\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport Board from \"./Board\";\n\nconst WIDTH = 3;\n\nconst Game = () => {\n  const [board, setBoard] = useState(Array(WIDTH ** 2).fill(null));\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXisNext] = useState(false);\n  const [winner, setWinner] = useState(null);\n\n  const nextPlayer = () => {\n    return xIsNext ? 'X' : 'O';\n  }\n\n  const calculateWinner = (lastMove, curBoard) => {\n    let colStart = lastMove % WIDTH;\n    let rowStart = lastMove - colStart;\n\n    // traverse column of last move\n    let count = 0;\n    for (let i = colStart; i < curBoard.length; i += WIDTH) {\n      if (curBoard[i] === null) break;\n      count = curBoard[i] === 'O' ? count + 1 : count - 1;\n    }\n    if (Math.abs(count) === WIDTH) {\n      return count > 0 ? 'O' : 'X';\n    }\n\n    // traverse row of last move\n    count = 0;\n    for (let i = 0; i < WIDTH; i++) {\n      if (!curBoard[rowStart + i]) break;\n      count = curBoard[rowStart + i] === 'O' ? count + 1 : count - 1;\n    }\n    if (Math.abs(count) === WIDTH) {\n      return count > 0 ? 'O' : 'X';\n    }\n\n    // traverse both diagonals\n    let diag = 0;\n    count = 0;\n    for (let i = 0; i < WIDTH; i++) {\n      if (curBoard[diag] === null) break;\n      count = curBoard[diag] === 'O' ? count + 1 : count - 1;\n      diag += WIDTH + 1;\n    }\n    if (Math.abs(count) === WIDTH) {\n      return count > 0 ? 'O' : 'X';\n    }\n\n    diag = WIDTH - 1;\n    count = 0;\n    for (let i = 0; i < WIDTH; i++) {\n      if (curBoard[diag] === null) break;\n      count = curBoard[diag] === 'O' ? count + 1 : count - 1;\n      diag += WIDTH - 1;\n    }\n    if (Math.abs(count) === WIDTH) {\n      return count > 0 ? 'O' : 'X';\n    }\n    return null;\n  }\n\n  const jumpToStart = () => {\n    setBoard(Array(WIDTH ** 2).fill(null));\n    setStepNumber(0);\n    setXisNext(false);\n    setWinner(null);\n  }\n\n  const handleClick = (i) => {\n    if (winner) {\n      alert(`${winner} already won!`);\n    } else if (board[i]) {\n      alert(\"Square already played!\");\n    } else {\n      const newBoard = [...board];\n      newBoard[i] = nextPlayer();\n      setBoard(newBoard);\n      setXisNext(nextPlayer() !== 'X');\n      setStepNumber(stepNumber + 1);\n      setWinner(calculateWinner(i, newBoard));\n    }\n  }\n\n  const result = () => {\n    if (winner) {\n      return `Winner: <${winner}>`;\n    } else if (stepNumber === WIDTH ** 2) {\n      return \"Tie Game\";\n    } else {\n      return `Next Player: <${nextPlayer()}>`;\n    }\n  }\n\n  return (\n      <>\n        <h1>Tic Tac Toe</h1>\n        <Board squares={board} onClick={(i) => handleClick(i)}></Board>\n        <div className='info-wrapper'>\n          <div>\n            <button onClick={jumpToStart}>Go to Start</button>\n          </div>\n          <h3>{result()}</h3>\n        </div>\n      </>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./components/Game\";\n\nReactDom.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}